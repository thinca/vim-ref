*ref.txt*	Integrated reference viewer.

Version: 0.4.3
Author : thinca <thinca+vim@gmail.com>
License: Creative Commons Attribution 2.1 Japan License
         <http://creativecommons.org/licenses/by/2.1/jp/deed.en>

==============================================================================
CONTENTS					*ref-contents*

INTRODUCTION			|ref-introduction|
REFERENCE VIEWER		|ref-viewer|
INTERFACE			|ref-interface|
  FUNCTIONS			  |ref-functions|
  COMMANDS			  |ref-commands|
  KEY MAPPINGS			  |ref-key-mappings|
CUSTOMIZING			|ref-customizing|
SOURCES				|ref-sources|
  AUTOLOAD			  |ref-autoload|
CHANGELOG			|ref-changelog|


==============================================================================
INTRODUCTION					*ref-introduction*

*ref* is a Vim plugin to view the reference.  This plugin can be separated to
core of viewer and sources of reference.  As a result, various references can
be viewed by the same interface.

Following sources are included in this plugin:
- alc		(|ref-alc.txt|)
- clojure	(|ref-clojure.txt|)
- erlang	(|ref-erlang.txt|)
- man		(|ref-man.txt|)
- perldoc	(|ref-perldoc.txt|)
- phpmanual	(|ref-phpmanual.txt|)
- pydoc		(|ref-pydoc.txt|)
- refe		(|ref-refe.txt|)

Requirements:
- Vim 7.2 or later

Latest version:
https://github.com/thinca/vim-ref



==============================================================================
REFERENCE VIEWER				*ref-viewer*

|ref-viewer| is mere a buffer to view the reference.  This is opened by |:Ref|
command or |<Plug>(ref-keyword)| key sequence like |:help|.  If |ref-viewer|
is already opened in current tab page, it is used again.
Each |ref-viewer| have a history of viewed pages, you can return at any time.



==============================================================================
INTERFACE					*ref-interface*

------------------------------------------------------------------------------
FUNCTIONS					*ref-functions*

ref#open({source-name}, {query} [, {options}])	*ref#open()*
			A function version of |:Ref|. {options} is specified
			by a dictionary.

ref#jump([{mode} [, {source-name}]] [, {options}])	*ref#jump()*
			Open the source with looking for query from the cursor
			position.  When the {source-name} is omitted,
			|ref#detect()| is used.
			How query is acquired is specified by {mode}.
			Any of the following is specified.

			"normal"	The query is acquired from the cursor
					position.  This is default.
			"visual"	The query is acquired from the string
					within the range selected immediately
					before.
			"line"/"char"/"block"
					This function can be used for
					'operatorfunc'.

			When the dictionary is passed to the argument, it is
			treated as much as {options} of ref#open().

ref#register({source})				*ref#register()*
ref#register({list-of-sources})
			Register a new source.  See |ref-sources| about
			{source}.

ref#available_source_names()			*ref#available_source_names()*
			Returns the |List| of names of sources already
			registered.

ref#available_sources([{source-name}])		*ref#available_sources()*
			Returns the view of source that has already registered
			as a |Dictionary|.  If the {source-name} of a source
			is specified and it is registered, it is returned,
			otherwise 0 is returned.  If you changed the source,
			it influences internally.

ref#detect()					*ref#detect()*
			Detect the appropriate source on current buffer.  This
			function uses |g:ref_detect_filetype|.  Return empty
			string when detection failed.

ref#register_detection({ft}, {source} [, {way}]) *ref#register_detection()*
			Register the entry to |g:ref_detect_filetype|.  If
			the entry already exists, this works as follows by the
			value of {way}.
			"ignore"	Not register.
			"overwrite"	Overwrite.
			"prepend"	When it is not a list, it makes to the
					list, and it adds it to the head.
			"append"	When it is not a list, it makes to the
					list, and it adds it to the tail.
			The default is "ignore".


The following functions are used by |ref-sources| mainly.

ref#cache({source-name} [, {name} [, {gather} [, {update}]]])	*ref#cache()*
			It is a function to cache a time-consuming list to
			acquisition.  The list is cached in the automatic
			operation in using this function. The cached list is
			returned at the following.
			{source-name} is a name of source.
			{name} is a arbitrary name for identification.  This
			is not a empty string.
			When {name} is omitted, the list of {name} that has
			been already cached is returned.
			{gather} is one of the following.
			1. A |Funcref| for getting the list.
			2. A evaluatable string by |eval()|.  (Note scope.)
			3. A dictionary with dictionary function "call" in
			   member.
			4. A |List| for caching.
			A function of 1 and 3 is received {name} as argument.
			a:name can be referred by 2.
			In any case, it is necessary to return the list.
			When {gather} is omitted, the cached list is acquired.
			When cash doesn't exist, 0 is returned.
			When numbers except 0 are given to {update}, cash is
			updated.

ref#rmcache([{source-name} [, {name}]])		*ref#rmcache()*
			Remove the cache created by |ref#cache()|.  If {name}
			is omitted, remove the all of cache of {source-name}.
			If {source-name} is omitted, remove the all of cache.

ref#system({expr} [, {input}])			*ref#system()*
			Like |system()|, but {expr} takes a |List|.  Each
			items are processed by |shellescape()|.
			If {expr} is a string, it is separated by
			|ref#to_list()|.
			In addition, this function returns a |Dictionary| that
			has following entries.
			result: Return code.
			stdout: Standard output.
			stderr: Standard error.
			This function uses |vimproc#system()| instead of
			|system()| if |g:ref_use_vimproc| is true.
			vimproc: https://github.com/Shougo/vimproc

ref#to_list({expr}, ...)			*ref#to_list()*
			Convert {expr} into a |List|.
			If {expr} is a |List|, return {expr}.
			If {expr} is a string, splitted by |split()|.
			Otherwise, return a |List| which contains {expr}.
			When two or more arguments are passed, the one that
			all the arguments were converted is joined and
			returned.

ref#uniq({list})				*ref#uniq()*
			Return new list that omitted repeated items.  The
			result is sorted by |sort()|.

ref#get_text_on_cursor({pattern})		*ref#get_text_on_cursor()*
			When the text under the cursor is a specified pattern,
			the text is acquired. The empty string is returned
			when not matching it to the pattern.


------------------------------------------------------------------------------
COMMANDS					*ref-commands*

:Ref [{options}] {source-name} [{query}]	*:Ref*
			Open the |ref-viewer|.  [query] is used by
			|ref-sources| as query.
			This can specify the option before {source-name}.
			Option is start with "-".  The following options can
			be used.
						*:Ref-option*
			-open={command}	Overwrite the |g:ref_open|.
			-new		Open the viewer forcely and newly.
			-nocache	Don't use cache.
			-noenter	Don't enter the |rev-viewer|.
			-updatecache	Update cache.

:RefHistory					*:RefHistory*
			List the history in |ref-viewer|.  It is possible to
			jump there by inputting the number.
			This command is available only in the |ref-viewer|.


------------------------------------------------------------------------------
KEY MAPPINGS					*ref-key-mappings*

<Plug>(ref-keyword)				*<Plug>(ref-keyword)*
			Jump to reference of the keyword under the cursor.
			See also |ref-source-attr-get_keyword()|.
			|ref#detect()| is used for the detection of the
			source.  When the source that should be used is not
			found, the same behavior as |K|.



The following key mappings are available in |ref-viewer|.

[count] <Plug>(ref-forward)			*<Plug>(ref-forward)*
[count] <Plug>(ref-back)			*<Plug>(ref-back)*
			Follow the history in |ref-viewer|.


					    *g:ref_no_default_key_mappings*
The following key mappings will be also available unless
g:ref_no_default_key_mappings is defined:

(In global)
{lhs}			{rhs}
--------		-----------------------------
K			<Plug>(ref-keyword)

(In |ref-viewer|)
{lhs}			{rhs}
--------		-----------------------------
<CR>			<Plug>(ref-keyword)
<2-LeftMouse>		<Plug>(ref-keyword)
<C-]>			<Plug>(ref-keyword)
<C-t>			<Plug>(ref-back)
<C-o>			<Plug>(ref-back)
<C-i>			<Plug>(ref-forward)



==============================================================================
CUSTOMIZING					*ref-customizing*

FileType ref					*filetype-ref*
	This event occurs after the initialization of the |ref-viewer|.
	Example: >
	autocmd FileType ref call s:initialize_ref_viewer()
	function! s:initialize_ref_viewer()
	  nmap <buffer> b <Plug>(ref-back)
	  nmap <buffer> f <Plug>(ref-forward)
	  nnoremap <buffer> q <C-w>c
	  setlocal nonumber
	  " ... and more settings ...
	endfunction
<

FileType ref-{source-name}			*filetype-ref-{source-name}*
	The filetype set actually finally becomes ref-{source-name} though
	|filetype-ref| is generated when |ref-viewer| is opened first.
	This event is generated every time the source changes.

g:ref_open					*g:ref_open*
	The Assistance command used when |ref-viewer| is opened.  For example,
	|:vsplit|, |:tabnew|, and so on.  The default value is "split".

g:ref_cache_dir					*g:ref_cache_dir*
	The directory for caching.  Some sources uses this via |ref#cache()|.
	The default value is "~/.vim_ref_cache".  ~ means home directory.

g:ref_use_vimproc				*g:ref_use_vimproc*
	When true, |ref#system()| use |vimproc|.  When |vimproc#system()|
	exists, the default value is true, and otherwise false.

g:ref_detect_filetype				*g:ref_detect_filetype*
	Specifies the |Dictionary| to detect the using source from |filetype|.
	This is used by |ref#detect()|.  The key is a filetype, and the value
	is a source name, a list of sources, or a |Funcref|.
	If the value is a list of sources, the source that the body was found
	at first is used.  The list is nestable.
	If the value is a |Funcref|, it take a filetype as argument and return
	a source name, a list of source names, or a |Funcref|.  If it can not
	detect, return empty string.
	If _ key exists, it is used when the filetype was not registered.
	Some sources register the appropriate entry on loaded.

g:ref_noenter					*g:ref_noenter*
b:ref_noenter					*b:ref_noenter*
	Always enable the -noenter of |:Ref-option|.



==============================================================================
SOURCES						*ref-sources*

A source is a |Dictionary|.  A source have the following attributes.  A
function is a |Dictionary-function|.  The {query} is a string passed by |:Ref|
command.

name					*ref-source-attr-name*
			Required.  The name for this source.

get_body({query})			*ref-source-attr-get_body()*
			Required.  Return the body of reference by List of
			line break delimitation or String.
			A dictionary that has the following entries also can
			be returned.
			body: Required.  The body of reference.
			query: Optional.  The normalized {query}.
			Throws an exception with an error message if body is
			not found.

available()				*ref-source-attr-available()*
			Optional.  Return true if this source is available.
			Always available when this is omitted.

opened({query})				*ref-source-attr-opened()*
			Optional.  When every reference page is opened, this
			function is called.  You can edit the |ref-viewer|
			buffer in this timing to initialization.

get_keyword()				*ref-source-attr-get_keyword()*
			Optional.  Pick up the keyword from current cursor
			position.  If omitted, "expand('<cword>')" is used.
			You can move the cursor because cursor position are
			restored.
			The keyword is treated as {query}.
			The list of the form of [{source-name}, {keyword}] can
			be returned.  In this case, the keyword is opened by
			the specified source.

complete({query})			*ref-source-attr-complete()*
			Optional.  Return the completion list for command-line.

normalize({query})			*ref-source-attr-normalize()*
			Optional.  Normalize the {query}.  It is used for
			buffer name, and passed to get_body() and opened().

leave()					*ref-source-attr-leave()*
			Optional.  This function is called when move to other
			source page.

cache({name} [, {gather} [, {update}]])	*ref-source-attr-cache()*
			Defined by core.  This is a shortcut to |ref#cache()|.

------------------------------------------------------------------------------
AUTOLOAD					*ref-autoload*

A auto load function ref#{source-name}#define() is called automatically when
autoload/ref.vim is loaded, and the return value is registered as source.



==============================================================================
CHANGELOG					*ref-changelog*

x.x.x	xxxx-xx-xx
	- |ref#register()| can accept a list of sources.
	- Fixed for Vim 7.3.162 .
	- Fixed |ref#rmcache()|.

0.4.3	2011-01-20
	- Added |ref#rmcache()|.
	- |g:ref_detect_filetype| accepts a list of sources.
	- A function of |g:ref_detect_filetype| can return a |Funcref|.
	- Improved |ref#register_detection()|.
	- |ref-source-attr-available()| became omitable.
	- Fixed the bug to which {name} including "/" can not be taken out by
	  |ref#cache()|.
	- Fixed a bug when a list including empty string is passed to
	  |ref#uniq()|.

0.4.2	2010-10-31
	- Display an error when a body is empty.
	- Improved the handling of an error.
	- The list of {name} was able to be taken by |ref#cache()|.
	- Improved the command line completion.

0.4.1	2010-06-04
	- |ref-source-attr-get_body()| can return a |Dictionary|.
	- |ref#cache()| accepts a |List| as {gather}.
	- Fixed the arguments of |ref-source-attr-cache()|.
	- Fixed the some bugs for |ref#detect()|.
	- Fixed a bug that |filetype-ref-{source-name}| is not changed when go
	  back the history.

0.4.0	2010-05-31
	- Changed filetype convention.
	  - See |filetype-ref-{source-name}|.
	- Do not add to the history when a continuous, same page was opened.
	- Added |ref-source-attr-cache()|.
	- {gather} of |ref#cache()| was made omissible.
	- Added the {update} argument to |ref#cache()|.
	- Added the -updatecache to |:Ref-option|.

0.3.3	2010-05-23
	- Added |ref#to_list()|.
	- Fixed a bug that the range of |ref#get_text_on_cursor()| was wrong.
	- |ref#open()| can take options.
	- |ref#jump()| can take options.
	- Added the -noenter to |:Ref-option|.
	- Added the |g:ref_noenter| and the |b:ref_noenter|.

0.3.2	2010-05-07
	- Added |ref#uniq()|.
	- Added |ref#get_text_on_cursor()|.
	- Added |ref-source-attr-normalize()|.
	- The option is able to be specified for Ref. (|:Ref-option|)

0.3.1	2010-04-22
	- |g:ref_detect_filetype| accepts a special key _.
	- |g:ref_detect_filetype| accepts |Funcref|.

0.3.0	2010-04-18
	- Changed the specification of |ref-sources|.
	  - It has no compatibility with any previous versions.
	- Changed returns value of |ref#system()|.
	- get_keyword() can specify the source with list.
	- The name for cache allows a lot of kinds of characters.
	- The detection feature was merged to core.
	  - Removed the detect source.

0.2.0	2010-01-28
	- A function of {gather} in |ref#cache()| takes {name} as an argument.
	- Improved the way to get selected text.

0.1.2	2010-01-22
	- Fixed a bug that doesn't work on MS Windows when |g:ref_use_vimproc|
	  = 0.

0.1.1	2010-01-20
	- Added |ref#system()|.

0.1.0	2009-12-22
	- Added |ref#cache()|.

0.0.2	2009-08-20
	- Changed the name and the means of g:ref_split.
	  - Changed to g:ref_open.
	- Fixed the bug that same items appears in completion of source.

0.0.1	2009-08-09
	- Initial version.


==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl:nolist
