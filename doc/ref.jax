*ref.txt*	総合リファレンスビューア。

Version: 0.4.3
Author : thinca <thinca+vim@gmail.com>
License: クリエイティブ・コモンズの表示 2.1 日本ライセンス
         <http://creativecommons.org/licenses/by/2.1/jp/>

==============================================================================
目次						*ref-contents*

概要				|ref-introduction|
リファレンスビューア		|ref-viewer|
インターフェース		|ref-interface|
  関数				  |ref-functions|
  コマンド			  |ref-commands|
  キーマッピング		  |ref-key-mappings|
カスタマイズ			|ref-customizing|
ソース				|ref-sources|
  オートロード			  |ref-autoload|
更新履歴			|ref-changelog|


==============================================================================
概要						*ref-introduction*

*ref.vim* はリファレンスを見るための Vim プラグインです。このプラグインは
ビューアのコアの部分とリファレンスのソースに分かれています。これにより、同じイ
ンターフェースで複数のリファレンスを閲覧できます。

このプラグインには以下のソースが含まれています:
- clojure	(|ref-clojure.txt|)
- erlang	(|ref-erlang.txt|)
- man		(|ref-man.txt|)
- perldoc	(|ref-perldoc.txt|)
- phpmanual	(|ref-phpmanual.txt|)
- pydoc		(|ref-pydoc.txt|)
- redis
- refe		(|ref-refe.txt|)
- rfc
- webdict	(|ref-webdict.txt|)

標準添付以外のソースの一覧:
https://github.com/thinca/vim-ref/wiki/sources

他のインターフェースも利用できます:
- ku-ref	(|ku-ref.txt|)
- unite-ref	(|unite-ref.txt|)

要件:
- Vim 7.2 以降

最新版:
https://github.com/thinca/vim-ref



==============================================================================
リファレンスビューア				*ref-viewer*

|ref-viewer| は、リファレンスを見るための単なるバッファです。これは |:help| と
同じように |:Ref| コマンドや |<Plug>(ref-keyword)| キーシーケンスによって開か
れます。|ref-viewer| がカレントタブページ内で既に開かれていた場合はそれが再利
用されます。
|ref-viewer| はバッファ毎にそれぞれ表示したページの履歴を保持していて、いつで
も戻ることができます。



==============================================================================
インターフェース				*ref-interface*

------------------------------------------------------------------------------
関数						*ref-functions*

ref#open({source-name}, {query} [, {options}])	*ref#open()*
			|:Ref| の関数版です。{options} は辞書で指定します。

ref#jump([{mode} [, {source-name}]] [, {options}])	*ref#jump()*
			カーソル位置からクエリを探してソースを開きます。ソース
			名が省略された場合、|ref#detect()| が使われます。
			{mode} にはクエリをどのように取得するかを指定します。
			以下のうちのいずれかを指定します。

			"normal"	カーソル下からクエリを取得します。これ
					がデフォルトです。
			"visual"	直前に選択された範囲の文字列がクエリと
					して使われます。
			"line"/"char"/"block"
					これによりこの関数は 'operatorfunc' と
					して機能します。

			引数に辞書が渡された場合、|ref#open()| の {options} と
			同じように扱われます。

ref#register({source})				*ref#register()*
ref#register({list-of-sources})
			新しいソースを登録します。{source} に関しては
			|ref-sources|を参照してください。

ref#available_source_names()			*ref#available_source_names()*
			すでに登録されているソースの名前のリスト(|List|)を返し
			ます。

ref#available_sources([{source-name}])		*ref#available_sources()*
			すでに登録されているソースの一覧を辞書(|Dictionary|)で
			返します。{source-name} が指定されてその名前のソースが
			登録されていた場合はそのソースを返します。そうでない場
			合は 0 を返します。ソースを変更した場合、内部に影響を
			与えます。

ref#detect()					*ref#detect()*
			カレントバッファに適切なソースを検出します。この関数は
			|g:ref_detect_filetype| を使います。検出に失敗した場合
			は空の文字列を返します。

ref#register_detection({ft}, {source} [, {way}]) *ref#register_detection()*
			|g:ref_detect_filetype| にエントリを登録します。すでに
			登録済みの場合は、{way} の値によって以下のようになりま
			す。
			"ignore"	登録しません。
			"overwrite"	置き換えます。
			"prepend"	リストでない場合はリストにして、先頭に
					追加します。
			"append"	リストでない場合はリストにして、末尾に
					追加します。
			デフォルトは "ignore" です。


以下の関数は主に |ref-sources| によって使われます。

ref#cache({source-name} [, {name} [, {gather} [, {update}]]])	*ref#cache()*
			取得に時間のかかるリストをキャッシュするための関数で
			す。この関数を介することでリストは自動でキャッシュされ
			ます。以降はキャッシュされたリストを返します。
			{source-name} はソース名です。
			{name} は識別のための任意の名前です。これは空文字列で
			あってはいけません。
			{name} が省略された場合、すでにキャッシュされている
			{name} のリストを返します。
			{gather} は以下のうちのいずれかです。
			1. リストを取得するための |Funcref|。
			2. |eval()| で評価可能な文字列。(スコープに注意。)
			3. 辞書関数 "call" をメンバに持つ辞書。
			4. キャッシュする |List|.
			1 と 3 は関数の引数に {name} を受け取ります。
			2 は a:name を参照できます。
			いずれの場合もリストを返す必要があります。
			{gather} が省略された場合、キャッシュされたリストを取
			得します。キャッシュが存在しない場合、0 を返します。
			{update} に 0 以外が与えられた場合、キャッシュを更新し
			ます。

ref#rmcache([{source-name} [, {name}]])		*ref#rmcache()*
			|ref#cache()| で生成されたキャッシュを削除します。
			{name} が省略された場合は {source-name} の全てのキャッ
			シュを削除します。 {source-name} が省略された場合は全
			てのキャッシュを削除します。

ref#system({expr} [, {input}])			*ref#system()*
			|system()| と同じですが、{expr} はリスト(|List|)を取り
			ます。各要素は |shellescape()| で処理されます。
			{expr} が文字列の場合、|ref#to_list()| によって分割さ
			れます。
			この関数は以下の要素を持つ辞書(|Dictionary|)を返しま
			す。
			result: リターンコード。
			stdout: 標準出力。
			stderr: 標準エラー出力。
			この関数は、|g:ref_use_vimproc| が真の時は |system()|
			の代わりに |vimproc#system()| を使用します。
			vimproc: https://github.com/Shougo/vimproc

ref#to_list({expr}, ...)				*ref#to_list()*
			{expr} を |List| に変換します。
			{expr} が |List| の場合、{expr} をそのまま返します。
			{expr} が文字列の場合、|split()| で分割します。
			それ以外の場合、{expr} を含む |List| を返します。
			複数の引数を渡した場合、全ての引数を変換したものを連結
			して返します。

ref#uniq({list})				*ref#uniq()*
			重複した項目を取り除いた新しいリストを返します。結果
			は|sort()| でソートされます。

ref#get_text_on_cursor({pattern})		*ref#get_text_on_cursor()*
			カーソル下のテキストが指定したパターンである場合、その
			テキストを取得します。パターンにマッチしない場合は空文
			字列を返します。


------------------------------------------------------------------------------
コマンド					*ref-commands*

:Ref [{options}] {source-name} [{query}]	*:Ref*
			|ref-viewer| を開きます。 [query] は |ref-sources| の
			クエリに使われます。
			{source-name} の前にオプションを指定できます。
			オプションは "-" で始まります。以下のオプションが使用
			できます。
						*:Ref-option*
			-open={command}	|g:ref_open| を上書きします。
			-new		強制的に新しくビューアを開きます。
			-nocache	キャッシュを使いません。
			-noenter	|ref-viewer| へ移動しません。
			-updatecache	キャッシュを更新します。

:RefHistory					*:RefHistory*
			|ref-viewer| の履歴をリスト表示します。数字を入力する
			ことでそこへジャンプできます。
			|ref-viewer| 内でのみ使用できます。


------------------------------------------------------------------------------
キーマッピング 					*ref-key-mappings*

<Plug>(ref-keyword)				*<Plug>(ref-keyword)*
			カーソル位置のキーワードのリファレンスにジャンプしま
			す。|ref-source-attr-get_keyword()| も参照してくださ
			い。ソースの検出には |ref#detect()| が使われます。ソー
			スが見つからなかった場合は |K| を押したのと同じになり
			ます。


以下のキーマッピングは |ref-viewer| 内で利用可能です。

[count] <Plug>(ref-forward)			*<Plug>(ref-forward)*
[count] <Plug>(ref-back)			*<Plug>(ref-back)*
			|ref-viewer| 内での履歴を辿ります。


					    *g:ref_no_default_key_mappings*
以下のキーマッピングは g:ref_no_default_key_mappings を定義していなかった場合
に利用可能です。

(全体)
{lhs}			{rhs}
--------		-----------------------------
K			<Plug>(ref-keyword)

(|ref-viewer| 内)
{lhs}			{rhs}
--------		-----------------------------
<CR>			<Plug>(ref-keyword)
<2-LeftMouse>		<Plug>(ref-keyword)
<C-]>			<Plug>(ref-keyword)
<C-t>			<Plug>(ref-back)
<C-o>			<Plug>(ref-back)
<C-i>			<Plug>(ref-forward)



==============================================================================
カスタマイズ					*ref-customizing*

FileType ref					*filetype-ref*
	このイベントは |ref-viewer| の初期化後に発生します。
	例: >
	autocmd FileType ref call s:initialize_ref_viewer()
	function! s:initialize_ref_viewer()
	  nmap <buffer> b <Plug>(ref-back)
	  nmap <buffer> f <Plug>(ref-forward)
	  nnoremap <buffer> q <C-w>c
	  setlocal nonumber
	  " ... and more settings ...
	endfunction
<

FileType ref-{source-name}			*filetype-ref-{source-name}*
	|filetype-ref| は最初に |ref-viewer| が開かれた際に発生しますが、実際
	に最終的に設定されるファイルタイプは ref-{source-name} になります。
	このイベントはソースが切り替わる度に発生します。

g:ref_open					*g:ref_open*
	|ref-viewer| を開く際の補助コマンドです。例えば、|:vsplit| や
	|:tabnew|などを指定します。デフォルト値は "split" です。

g:ref_cache_dir					*g:ref_cache_dir*
	キャッシュを保持しておくためのディレクトリです。|ref#cache()| はこの値
	を参照してキャッシュファイルを生成します。デフォルト値は
	"~/.cache/vim-ref" です。~ はホームディレクトリを表します。

g:ref_use_vimproc				*g:ref_use_vimproc*
	真の時、|ref#system()| は |vimproc| を使います。デフォルト値は、
	|vimproc#system()| が存在する場合は真、そうでない場合は偽です。

g:ref_detect_filetype				*g:ref_detect_filetype*
	|filetype| からソースを検出するための |Dictionary| を指定します。これ
	は |ref#detect()| で使用されます。キーにファイルタイプ、値にはソース
	名、ソース名のリスト、もしくは |Funcref| を指定します。
	リストの場合、最初に本文がみつかったソースが使われます。リストはネスト
	可能です。
	|Funcref| の場合、その関数はファイルタイプを引数にとり、ソース名か、
	ソース名のリストか、 |Funcref| を返します。検出できない場合は空文字列
	を返します。
	キーに _ を使うと、ファイルタイプが登録されていなかった場合に使用され
	ます。いくつかのソースはロード時にエントリを登録します。

g:ref_noenter					*g:ref_noenter*
b:ref_noenter					*b:ref_noenter*
	|:Ref-option| の -noenter を常に有効にします。



==============================================================================
ソース						*ref-sources*

ソースは辞書(|Dictionary|)です。ソースは以下の属性を持ちます。関数は辞書関数
(|Dictionary-function|)です。{query} は|:Ref| で渡される文字列です。

name					*ref-source-attr-name*
			必須。このソースの名前です。

get_body({query})			*ref-source-attr-get_body()*
			必須。リファレンスの本文を改行区切りの文字列かリストで
			返します。
			また、以下の要素を持つ辞書を返すこともできます。
			body: 必須。リファレンスの本文。
			query: 任意。正規化された {query}。
			本文が見つからない場合はエラーメッセージと共に例外を投
			げます。

available()				*ref-source-attr-available()*
			任意。ソースが利用可能ならば真を返します。省略した場合
			は常に利用可能です。

opened({query})				*ref-source-attr-opened()*
			任意。この関数はリファレンスページが開かれる度に呼ばれ
			ます。このタイミングで |ref-viewer| を初期化のために
			編集することができます。

get_keyword()				*ref-source-attr-get_keyword()*
			任意。現在のカーソル位置からキーワードを取得します。未
			定義の場合は "expand('<cword>')" が使われます。カーソ
			ル位置は復元されるので、カーソルを動かしても問題ありま
			せん。
			キーワードは {query} として扱われます。
			[{source-name}, {keyword}] の形式のリストを返すことも
			できます。この場合指定されたソースでキーワードが開かれ
			ます。
			キーワードが見つからない場合はエラーメッセージと共に例
			外を投げます。

complete({query})			*ref-source-attr-complete()*
			任意。コマンドラインの補完リストを返します。

normalize({query})			*ref-source-attr-normalize()*
			任意。{query} を正規化します。これはバッファ名として使
			われ、そして get_body() と opened() に渡されます。

leave()					*ref-source-attr-leave()*
			任意。この関数は別のソースに移動する際に呼ばれます。

cache({name} [, {gather} [, {update}]])	*ref-source-attr-cache()*
			本体によって定義されます。|ref#cache()| の短縮版です。

------------------------------------------------------------------------------
オートロード					*ref-autoload*

オートロード関数 ref#{source-name}#define() は、autoload/ref.vim が読み込まれ
る際に自動的に呼ばれ、戻り値がソースとして登録されます。



==============================================================================
更新履歴					*ref-changelog*

x.x.x	xxxx-xx-xx
	- |ref#register()| がソースのリストを受け取れるようにした。
	- Vim 7.3.162 でエラーが出ていたのを修正。
	- |ref#rmcache()| で削除されないファイルがあったのを修正。

0.4.3	2011-01-20
	- |ref#rmcache()| を追加。
	- |g:ref_detect_filetype| にソースのリストが使えるようにした。
	- |g:ref_detect_filetype| の関数が |Funcref| を返せるようにした。
	- |ref#register_detection()| を改善。
	- |ref-source-attr-available()| を省略可能にした。
	- |ref#cache()| で "/" を含む {name} が取り出せないバグを修正。
	- |ref#uniq()| に空文字列を含むリストを渡すとエラーになるバグを修正。

0.4.2	2010-10-31
	- 本文が空の場合にエラーを表示するようにした。
	- エラー時の処理を改善。
	- |ref#cache()| で {name} のリストを取れるようにした。
	- コマンドラインの補完を改善。

0.4.1	2010-06-04
	- |ref-source-attr-get_body()| が辞書を返せるようにした。
	- |ref#cache()| が {gather} に |List| を受け付けるようにした。
	- |ref-source-attr-cache()| の引数が変わっていなかったのを修正。
	- |ref#detect()| に関するいくつかのバグを修正。
	- 履歴を戻った時 |filetype-ref-{source-name}| が変更されないバグを修
	  正。

0.4.0	2010-05-31
	- ファイルタイプの規則を変更。
	  - |filetype-ref-{source-name}| を参照。
	- 連続で同じページを開いた場合履歴に追加しないようにした。
	- |ref-source-attr-cache()| を追加。
	- |ref#cache()| の {gather} を省略できるようにした。
	- |ref#cache()| に {update} 引数を追加。
	- |:Ref-option| に -updatecache を追加。

0.3.3	2010-05-23
	- |ref#to_list()| を追加。
	- |ref#get_text_on_cursor()| の範囲が間違っていたのを修正。
	- |ref#open()| がオプションを受け取れるようにした。
	- |ref#jump()| がオプションを受け取れるようにした。
	- |:Ref-option| に -noenter を追加。
	- |g:ref_noenter| と |b:ref_noenter| を追加。

0.3.2	2010-05-07
	- |ref#uniq()| を追加。
	- |ref#get_text_on_cursor()| を追加。
	- |ref-source-attr-normalize()| を追加。
	- |:Ref| にオプションを指定できるようにした。(|:Ref-option|)

0.3.1	2010-04-22
	- |g:ref_detect_filetype| が特殊なキー _ を受け付けるようにした。
	- |g:ref_detect_filetype| が |Funcref| を受け付けるようにした。

0.3.0	2010-04-18
	- |ref-sources| の仕様を変更。
	  - 以前のバージョンとの互換性はありません。
	- |ref#system()| の戻り値を変更。
	- get_keyword() はリストを返すことでソースを指定できるようにした。
	- キャッシュで使用する名前により多くの種類の文字を許容するようにした。
	- 検出機能を本体に結合。
	  - detect ソースを削除。

0.2.0	2010-01-28
	- |ref#cache()| の {gather} に渡す関数が、引数として {name} を受け取る
	  ように変更。
	- 選択テキストの取得方法を改善。

0.1.2	2010-01-22
	- |g:ref_use_vimproc| = 0 の時、MS Windows 上で動作しないバグを修正。

0.1.1	2010-01-20
	- |ref#system()| を追加。

0.1.0	2009-12-22
	- |ref#cache()| を追加。

0.0.2	2009-08-20
	- g:ref_split の名前と意味を変更。
	  - g:ref_open へ変更。
	- ソースの補完時に同じ項目が出ることがあるバグを修正。

0.0.1	2009-08-09
	- 初版。


==============================================================================
vim:tw=78:fo=tcq2mM:ts=8:ft=help:norl
